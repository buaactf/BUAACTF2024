#AMM & p-1
from random import choice
from Crypto.Util.number import isPrime, sieve_base as primes
from Crypto.Util.number import getPrime,bytes_to_long,inverse
from secret import flag


def flawPrime(bits):
    while True:
        n=2
        while n.bit_length()<bits:
            n*=choice(primes)
        if isPrime(n-1):
            return n-1


p=getPrime(1024)
q=flawPrime(1024)
n = p * q
plaintext = bytes_to_long(flag)
cipher = pow(plaintext,e,n)
print(cipher)

# n = 1912561828314523531858872335508929807615999610646596571343486074950952702669037414875194296408303047292081641645488574198223068495467311667886907594118975080380322305292189242805374929917727056899020205493688521709416500683819620202430504437977672681428162487894883643081202797119347996221441213915850067839004497486587812644396497158816391305052566004706451483898881090071347430185506430152666766414775570634039317598642671444195019469769475967905729247913146812295890733934064693528515934103339012545623758553920649738182157379075067158116159819456177339877048408923567152565337148415268742187199432073970106681959399
# cipher = 1210545720401830768891668411217205475753598258772724926036772193728980792658983827387578865036757290975780502911274836385689650390155901713875455698208173801170140593326070029906936392527507409140201420512809239713236353189681033328073025405958820669313777971765620265369292034109604282080576332861112795726725500523730747239510961990434025694767974151667233589803837973573327131909987051798407356739591120481335824057790205402346403915290251900041488272100835251905936710002954653683881097983653224257809880628210983331869701496395048286199898497951516661519464311059381965339250195841138912963506397271165295988014123
# e = 75721